"""
AUTHOR
Elisabetta Manduchi

SCOPE
(neg)MSE and r2 scorers for resAdjTPOT. They Expect X to contain indicator
and adjY (y) columns as generated by the resAdjTpotPreprocessor script.
"""

import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error, r2_score

def getYtrue(X, y):
    indX = X.filter(regex='indicator')
    if indX.shape[1] == 0:
        raise ValueError("X has no indicator columns")
    adjY = X.filter(regex='adjY')
    if (adjY.shape[1] == 0):
        raise ValueError("X has no adjY columns")
    y_true = y
    for col in indX.columns:
        if sum(indX[col])==indX.shape[0]:
            i = col.split('_')[1]
            y_true = X['adjY_' + i]
            break
    return y_true

def resAdjMseScorer(estimator, X, y):
    """
    Evaluate predicted target values for X relative to y_true.

    Parameters
    ----------
    X : array-like or sparse matrix
    Test data that will be fed to estimator.predict.
    Must contain indicator and adjY columns
    y : array-like
    This is adjY

    Returns
    -------
    score : float
    Score function applied to prediction of estimator on X.
    """

    y_pred = estimator.predict(X)
    y_true = getYtrue(X, y)
    if len(y_true) != len(y_pred):
        raise ValueError("y_pred and y_true have different lengths")

    score = -(mean_squared_error(y_true, y_pred))
    return score

def resAdjR2Scorer(estimator, X, y):
    """
    Evaluate predicted target values for X relative to y_true.

    Parameters
    ----------
    X : array-like or sparse matrix
    Test data that will be fed to estimator.predict.
    Must contain indicator and adjY columns
    y : array-like
    This is adjY

    Returns
    -------
    score : float
    Score function applied to prediction of estimator on X.
    """

    y_pred = estimator.predict(X)
    y_true = getYtrue(X, y)
    if len(y_true) != len(y_pred):
        raise ValueError("y_pred and y_true have different lengths")

    score = r2_score(y_true, y_pred)
    return score
